substitutions:
  name: talkie
  friendly_name: Talkie

  # Phases of the Voice Assistant
  # IDLE : The voice assistant is ready to be triggered by a wake word
  voice_assist_idle_phase_id: '1'
  # LISTENING: The voice assistant is ready to listen to a voice command (after being triggered by the wake word)
  voice_assist_listening_phase_id: '2'
  # The voice assistant is currently processing the command
  voice_assist_thinking_phase_id: '3'
  # The voice assistant is replying to the command
  voice_assist_replying_phase_id: '4'
  # The voice assistant is not ready 
  voice_assist_not_ready_phase_id: '10'
  # The voice assistant encountered an error
  voice_assist_error_phase_id: '11'  
  # The voice assistant is muted and will not reply to a wake word
  voice_assist_muted_phase_id: '12'


globals:
  # Global initialisation variable. Initialized to true and set to fasle once everything is connected. ONly used to have a smooth "plugging" experience
  - id: init_in_progress
    type: bool
    restore_value: no
    initial_value: 'true'
  # Global variable tracking the pahse of the voice assistant (defined above). Initialized to not_ready
  - id: voice_assistant_phase
    type: int
    restore_value: no
    initial_value: ${voice_assist_not_ready_phase_id}


esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  name_add_mac_suffix: false
  # Automation to perform everytime the device boots 
  on_boot:
      priority: 600
      then: 
        # Run the script to refresh the LED status
        - script.execute: control_led
        # If after 30 second, the device is still initializing (It did not yet connect to Home Assistant), turn off the init_in_progress variable and run the script to refresh the LED status
        - delay: 30s
        - if:
            condition:
              lambda: return id(init_in_progress);
            then:
              - lambda: id(init_in_progress) = false;
              - script.execute: control_led


esp32:
  board: featheresp32
  # This is important. ESPHome supports two frameworks: Arduino and ESP-IDF. ESP-IDF is needed to include an audio library called ESP_ADF used in our voice assistant
  framework:
    type: esp-idf


# Enable logging
logger:


# Enable Home Assistant API
api:
  encryption:
    key: !secret talkie-api-encryption-key
  # If the device connects, or disconnects, to Home Assistant: Run the script to refresh the LED status
  on_client_connected:
    - script.execute: control_led
  on_client_disconnected:
    - script.execute: control_led


ota:
  platform: esphome
  password: !secret talkie_ota_password


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # If the device connects, or disconnects, to the Wifi: Run the script to refresh the LED status
  on_connect:
    - script.execute: control_led
  on_disconnect:
    - script.execute: control_led


# This is how to include the Espressif Audio Development Framework. 
# This is needed to be able to use VAD (Voice audio detection) and prevent the voice assistant to be constantly streaming audio to Home Assistant
# For now, this component is not documented, nor on the code base of ESPHome, hence the refernece to the external component.
esp_adf:    
external_components:
  - source: github://pr#5230
    components:
      - esp_adf
    refresh: 0s 


# Declaration of our LED, with two effects: A "Slow Pulse" and a "Fast Pulse" that will be used as feedback for the different phases of our voice assistant
light:
  - platform: esp32_rmt_led_strip
    id: led
    name: Voice Assistant Led
    disabled_by_default: true
    entity_category: config
    pin: 16
    default_transition_length: 250ms
    chipset: WS2812
    num_leds: 1
    rgb_order: grb
    rmt_channel: 0
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%


script:
  # Master script controling the LED, based on differente conditions : initialisation in progress, wifi and api connceted and voice assistant phase.
  # For the sake of simplicity and re-usability, the script calls child sripts defined below.
  # This script will be called everytime one of these conditions is changing.
  - id: control_led
    then:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - if:
                condition:
                  wifi.connected:
                then:
                  - if:
                      condition:
                        api.connected:
                      then:
                        - lambda: |
                            switch(id(voice_assistant_phase)) {
                              case ${voice_assist_listening_phase_id}:
                                id(control_led_voice_assist_listening_phase).execute();
                                break;
                              case ${voice_assist_thinking_phase_id}:
                                id(control_led_voice_assist_thinking_phase).execute();
                                break;
                              case ${voice_assist_replying_phase_id}:
                                id(control_led_voice_assist_replying_phase).execute();
                                break;
                              case ${voice_assist_error_phase_id}:
                                id(control_led_voice_assist_error_phase).execute();
                                break;
                              case ${voice_assist_muted_phase_id}:
                                id(control_led_voice_assist_muted_phase).execute();
                                break;
                              case ${voice_assist_not_ready_phase_id}:
                                id(control_led_voice_assist_not_ready_phase).execute();
                                break;
                              default:
                                id(control_led_voice_assist_idle_phase).execute();
                                break;
                            }
                      else:
                        - script.execute: control_led_no_ha_connection_state
                else:
                  - script.execute: control_led_no_ha_connection_state
          else:
            - script.execute: control_led_init_state


  # Script executed during initialisation: In this example: Turn the LED in green with a slow pulse ðŸŸ¢
  - id: control_led_init_state
    then:
      - light.turn_on:
          id: led
          blue: 0%
          red: 0%
          green: 100%
          effect: "Fast Pulse"
  

  # Script executed when the device has no connection to Home Assistant: In this example: Turn off the LED 
  - id: control_led_no_ha_connection_state
    then:
      - light.turn_off:
          id: led  


  # Script executed when the voice assistant is idle (waiting for a wake word): In this example: Turn the LED in white with 20% of brightness âšª
  - id: control_led_voice_assist_idle_phase
    then:
      - light.turn_on:
          id: led
          blue: 100%
          red: 100%
          green: 100%
          brightness: 20%
          effect: "none"


  # Script executed when the voice assistant is listenintg to a command: In this example: Turn the LED in blue with a slow pulse ðŸ”µ
  - id: control_led_voice_assist_listening_phase
    then:
      - light.turn_on:
          id: led
          blue: 100%
          red: 0%
          green: 0%
          effect: "Slow Pulse"


  # Script executed when the voice assistant is thinking to a command: In this example: Turn the LED in blue with a fast pulse ðŸ”µ         
  - id: control_led_voice_assist_thinking_phase
    then:
      - light.turn_on:
          id: led
          blue: 100%
          red: 0%
          green: 0%
          effect: "Fast Pulse"


  # Script executed when the voice assistant is thinking to a command: In this example: Turn the LED in blue, solid (no pulse) ðŸ”µ         
  - id: control_led_voice_assist_replying_phase
    then:
      - light.turn_on:
          id: led
          blue: 100%
          red: 0%
          green: 0%
          brightness: 100%
          effect: "none"


  # Script executed when the voice assistant is thinking to a command: In this example: Turn the LED in red, solid (no pulse) ðŸ”´        
  - id: control_led_voice_assist_error_phase
    then:
      - light.turn_off:
          id: led


  # Script executed when the voice assistant is muted: In this example: Turn off the LED 
  - id: control_led_voice_assist_muted_phase
    then:
      - light.turn_off:
          id: led


  # Script executed when the voice assistant is not ready: In this example: Turn off the LED 
  - id: control_led_voice_assist_not_ready_phase
    then:
      - light.turn_off:
          id: led

  
# Declaration of the switch that will be used to turn on or off (mute) or voice assistant
switch:
  - platform: template
    name: Use Wake Word
    id: use_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    # When the switch is turned on (on Home Assistant):
    # Start the voice assistant component
    # Set the correct phase and run the script to refresh the LED status
    on_turn_on:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:      
            - lambda: id(va).set_use_wake_word(true);
            - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
            - if:
                condition:
                  not:
                    - voice_assistant.is_running
                then:
                  - voice_assistant.start_continuous
            - script.execute: control_led
    # When the switch is turned off (on Home Assistant):
    # Stop the voice assistant component
    # Set the correct phase and run the script to refresh the LED status
    on_turn_off:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:      
            - voice_assistant.stop
            - lambda: id(va).set_use_wake_word(false);
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
            - script.execute: control_led


# Declaration of our battery voltage
sensor:
  - platform: adc
    pin: A13
    id: battery_voltage
    name: "Battery Voltage"
    update_interval: 60s
    disabled_by_default: true
    entity_category: diagnostic
    attenuation: auto
    filters:
      - multiply: 2.0

# Declaration of our battery percentage
  - platform: template
    name: Battery
    update_interval: 60s
    device_class: "battery"
    state_class: "measurement"
    unit_of_measurement: "%"
    accuracy_decimals: 2
    lambda: return 123-123/pow(1+pow(id(battery_voltage).state/3.7,80),0.165);
  
# Declaration of the push-to-talk button
binary_sensor:
  - platform: gpio
    pin:
      number: 21
      mode:
        input: true
        pullup: true
    name: Push to talk Button
    disabled_by_default: true
    entity_category: diagnostic
    # Whe pressed: Start the voice assistant
    on_press:
      - if:
          condition:
            switch.is_off: use_wake_word
          then:
            - voice_assistant.start:
                silence_detection: false
    # When release. Stop the voice assistant, Set the correct phase and run the script to refresh the LED status
    on_release:
      - if:
          condition:
            switch.is_off: use_wake_word
          then:
            - voice_assistant.stop:
            - lambda: id(voice_assistant_phase) = ${voice_assist_thinking_phase_id};
            - script.execute: control_led


  # Declaration of the button used to change mode
  - platform: gpio
    name: Mode Switch
    pin:
      number: 17
      inverted: true
      mode:
        input: true
        pullup: true
    # When pressed: Turn led on
    on_press:
      then:
        - light.turn_on:
            id: led
            blue: 100%
            red: 100%
            green: 100%
            brightness: 50%
            transition_length: 0s   
    # When released, toggle switch and refresh the LED status
    on_release:
      then:
        - switch.toggle: use_wake_word 
        - delay: 1s
        - script.execute: control_led
  

# This is our two i2s buses with the correct pins. 
i2s_audio:
  - id: i2s_out
    i2s_lrclk_pin: 13
    i2s_bclk_pin: 33
  - id: i2s_in
    i2s_lrclk_pin: 32
    i2s_bclk_pin: 22


# This is the declaration of our speaker. 
# It includes the data pin
# It references the correct i2s bus declared above.
speaker:
  - platform: i2s_audio
    id: external_speaker
    dac_type: external
    i2s_audio_id: i2s_out
    i2s_dout_pin: 27


# This is the declaration of our microphone. 
# It includes the data pin
# It references the correct i2s bus declared above.
microphone:
  - platform: i2s_audio
    id: external_microphone
    adc_type: external
    i2s_audio_id: i2s_in
    i2s_din_pin: 14
    pdm: false


# This is the declaration of our voice assistant
# It references the microphone and speaker declared above.
voice_assistant:
  id: va
  microphone: external_microphone
  speaker: external_speaker
  use_wake_word: true

  noise_suppression_level: 4
  auto_gain: 31dBFS
  volume_multiplier: 8.0
  vad_threshold: 3

  # When the voice assistant connects to HA:
  # Set init_in_progress to false (Initialization is over).
  # If the switch is on, start the voice assistant
  # In any case: Set the correct phase and run the script to refresh the LED status
  on_client_connected:
    - lambda: id(init_in_progress) = false; 
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.start_continuous: 
          - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
        else:
          - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
    - script.execute: control_led

  # When the voice assistant disconnects to HA: 
  # Stop the voice assistant
  # Set the correct phase and run the script to refresh the LED status
  on_client_disconnected:
    - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};  
    - voice_assistant.stop
    - script.execute: control_led

  # When the voice assistant starts to listen: Set the correct phase and run the script to refresh the LED status
  on_listening:
    - lambda: id(voice_assistant_phase) = ${voice_assist_listening_phase_id};
    - script.execute: control_led

  # When the voice assistant starts to think: Set the correct phase and run the script to refresh the LED status
  on_stt_vad_end:
    - lambda: id(voice_assistant_phase) = ${voice_assist_thinking_phase_id};
    - script.execute: control_led

  # When the voice assistant starts to reply: Set the correct phase and run the script to refresh the LED status
  on_tts_stream_start:
    - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
    - script.execute: control_led
  
  # When the voice assistant finished to reply: Set the correct phase and run the script to refresh the LED status
  on_tts_stream_end:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
        else:
          - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
    - script.execute: control_led

  # When the voice assistant encounter an error: 
  # Set the error phase and run the script to refresh the LED status
  # Wait 1 second and set the correct phase (idle or muted depending of the state of the switch) and run the script to refresh the LED status 
  on_error:
    - if:
        condition:
          lambda: return !id(init_in_progress);
        then:
          - lambda: id(voice_assistant_phase) = ${voice_assist_error_phase_id};  
          - script.execute: control_led
          - delay: 1s
          - if:
              condition:
                switch.is_on: use_wake_word
              then:
                - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
              else:
                - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
          - script.execute: control_led