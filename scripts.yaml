leave_home:
  alias: Quitter la maison
  mode: queued
  sequence:
  - action: light.turn_off
    target:
      entity_id:
      - light.all_lights
    data: {}
  - action: script.eteindre_tous_les_lecteur_multimedia
    metadata: {}
    data: {}
  - action: switch.turn_off
    data: {}
    target:
      entity_id: switch.microphones
  - if:
    - condition: state
      entity_id: input_boolean.surveillance_de_la_maison_fermer_le_volet_quand_maison_vide
      state: 'on'
    then:
    - action: cover.close_cover
      metadata: {}
      data: {}
      target:
        entity_id: cover.living_room_cover
    alias: Close shutters
  icon: mdi:home-export-outline
  fields: {}
welcome_home:
  alias: Bienvenue a la maison
  mode: queued
  sequence:
  - action: light.turn_on
    metadata: {}
    data:
      transition: 2
      brightness_pct: 100
    target:
      entity_id: light.entree_suspension
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - action: light.turn_on
    metadata: {}
    data:
      transition: 2
      brightness_pct: 70
    target:
      entity_id:
      - light.salon_buffet_gauche
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - action: light.turn_on
    metadata: {}
    data:
      transition: 2
      brightness_pct: 70
    target:
      entity_id:
      - light.salon_buffet_droit
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - action: light.turn_on
    metadata: {}
    data:
      transition: 2
      brightness_pct: 100
    target:
      entity_id: light.salon_suspension_tv
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - action: light.turn_on
    metadata: {}
    data:
      brightness_pct: 60
      transition: 2
    target:
      entity_id:
      - light.hue_aurelle_panel_1
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - action: light.turn_on
    target:
      entity_id: light.salon_trepied
    data:
      transition: 2
      brightness_pct: 100
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - action: light.turn_on
    target:
      entity_id:
      - light.cuisine_comptoir
    data:
      transition: 2
      brightness_pct: 60
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - action: light.turn_on
    target:
      entity_id:
      - light.cuisine_suspension
    data:
      transition: 2
      brightness_pct: 100
  icon: mdi:home-import-outline
  description: ''
turn_off_media_center:
  alias: Turn Off Media center
  mode: single
  sequence:
  - action: media_player.turn_off
    target:
      entity_id:
      - media_player.kef
    data: {}
  - action: remote.turn_off
    data: {}
    target:
      entity_id: remote.jl_s_tv
  icon: mdi:remote-tv-off
turn_on_media_center:
  alias: Turn On Media center
  mode: single
  sequence:
  - action: media_player.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: media_player.kef_salon_music_assistant
  - action: media_player.turn_on
    target:
      entity_id:
      - media_player.kef
    data: {}
  - if:
    - condition: not
      conditions:
      - condition: state
        entity_id: media_player.kef
        state: Opt
        attribute: source
    then:
    - action: media_player.select_source
      target:
        entity_id: media_player.kef
      data:
        source: Opt
  - action: remote.turn_on
    data: {}
    target:
      entity_id: remote.jl_s_tv
  icon: mdi:remote-tv
wake_up:
  alias: Réveil Lumineux - Lumières
  sequence:
  - action: light.turn_off
    data: {}
    target:
      entity_id: light.chambre
  - action: light.turn_on
    data:
      transition: 300
      brightness_pct: 100
      color_temp: 490
    target:
      entity_id: light.chambre_bloom
  - delay:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  - action: light.turn_on
    data:
      transition: 300
      brightness_pct: 100
    target:
      entity_id:
      - light.chambre_suspension
      - light.chambre_chevet_droit
      - light.chambre_chevet_gauche
  - delay:
      hours: 0
      minutes: 10
      seconds: 0
      milliseconds: 0
  - action: light.turn_on
    data: {}
    target:
      entity_id: light.chambre_guirlande
  mode: single
  icon: mdi:weather-sunset-up
start_marilou_bedtime_routine:
  alias: Démarrer la routine du sommeil de Marilou
  sequence:
  - action: light.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: light.couloir_suspension_etage
  - action: scene.turn_on
    metadata: {}
    target:
      entity_id: scene.chambre_bebe_initial
  - action: media_player.turn_on
    data: {}
    target:
      entity_id:
      - media_player.sonos_chambre_marilou_music_assistant
  - action: media_player.volume_set
    data:
      volume_level: 0.1
    target:
      entity_id:
      - media_player.sonos_chambre_marilou_music_assistant
  - action: mass.play_media
    target:
      entity_id:
      - media_player.sonos_chambre_marilou_music_assistant
    data:
      media_id: Au Dodo Marilou
      enqueue: replace
      radio_mode: true
      media_type: playlist
  - action: media_player.shuffle_set
    data:
      shuffle: true
    target:
      entity_id:
      - media_player.sonos_chambre_marilou_music_assistant
  mode: single
  icon: mdi:bell-sleep
eteindre_temporairement_un_assistant_vocal:
  alias: Éteindre temporairement un assistant vocal
  sequence:
  - variables:
      target_entities: "{% set microphones = label_entities(\"Micro Assistant Vocal\")
        %}\n[\n  {%- for entity in device_entities(device) -%}\n    {%- if entity
        in microphones -%}\n      \"{{entity}}\",\n    {%- endif -%}\n  {%- endfor
        -%}\n]\n"
  - delay:
      hours: 0
      minutes: 0
      seconds: 5
      milliseconds: 0
  - action: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: '{{target_entities}}'
  - delay:
      hours: 0
      minutes: 30
      seconds: 0
      milliseconds: 0
  - action: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: '{{target_entities}}'
  fields:
    device:
      selector:
        device: {}
      name: Appareil
      description: Assistant Vocal à désactiver temporairement.
  mode: parallel
  icon: mdi:microphone-message-off
lancer_playlist_de_reveil:
  alias: Réveil Lumineux - Musique
  sequence:
  - action: media_player.turn_on
    data: {}
    target:
      entity_id:
      - media_player.sonos_chambre_music_assistant
  - action: media_player.volume_set
    data:
      volume_level: 0.1
    target:
      entity_id:
      - media_player.sonos_chambre_music_assistant
  - action: mass.play_media
    target:
      entity_id:
      - media_player.sonos_chambre_music_assistant
    data:
      media_id: ⏰ Réveil
      enqueue: replace
      media_type: playlist
  - action: media_player.shuffle_set
    data:
      shuffle: true
    target:
      entity_id:
      - media_player.sonos_chambre_music_assistant
  mode: single
  icon: mdi:alarm
controler_le_standing_desk:
  alias: Controler le Standing desk
  sequence:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{target_position == ''standing''}}'
      sequence:
      - repeat:
          sequence:
          - action: button.press
            target:
              entity_id:
              - button.standing_desk_move_desk_to_position_1
            data: {}
          - wait_for_trigger:
            - platform: state
              entity_id:
              - binary_sensor.standing_desk_moving
              to: 'on'
            timeout:
              hours: 0
              minutes: 0
              seconds: 3
              milliseconds: 0
          - wait_for_trigger:
            - platform: state
              entity_id:
              - binary_sensor.standing_desk_moving
              to: 'off'
            timeout:
              hours: 0
              minutes: 0
              seconds: 20
              milliseconds: 0
          - if:
            - condition: template
              value_template: '{{ repeat.index >= 5 }}'
            then:
            - stop: ''
          while:
          - condition: not
            conditions:
            - condition: state
              entity_id: sensor.standing_desk_state
              state: standing_position
    - conditions:
      - condition: template
        value_template: '{{target_position == ''sitting''}}'
      sequence:
      - repeat:
          sequence:
          - action: button.press
            target:
              entity_id: button.standing_desk_move_desk_to_position_2
            data: {}
          - wait_for_trigger:
            - platform: state
              entity_id:
              - binary_sensor.standing_desk_moving
              to: 'on'
            timeout:
              hours: 0
              minutes: 0
              seconds: 3
              milliseconds: 0
          - wait_for_trigger:
            - platform: state
              entity_id:
              - binary_sensor.standing_desk_moving
              to: 'off'
            timeout:
              hours: 0
              minutes: 0
              seconds: 20
              milliseconds: 0
          - if:
            - condition: template
              value_template: '{{ repeat.index >= 5 }}'
            then:
            - stop: ''
          while:
          - condition: not
            conditions:
            - condition: state
              entity_id: sensor.standing_desk_state
              state: seated_position
  fields:
    target_position:
      selector:
        select:
          options:
          - label: Position debout
            value: standing
          - label: Position assise
            value: sitting
          multiple: false
      name: Position cible
      description: Position cible du standing desk (Assise ou Debout)
      required: true
  description: Contrôler les standing desk dans le bureau en donnant une position
    cible. (Assise ou Debout)
  icon: mdi:desk
eteindre_tous_les_lecteur_multimedia:
  alias: Éteindre tous les lecteurs multimédia
  sequence:
  - action: media_player.media_pause
    metadata: {}
    data: {}
    target:
      entity_id:
      - media_player.sonos_bureau
      - media_player.sonos_chambre
      - media_player.sonos_chambre_marilou
  - action: media_player.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: media_player.all_media_players
  - action: media_player.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: media_player.apple_tv_salon
  description: ''
  icon: mdi:television-speaker-off
test_2:
  alias: Crazy Wake Up
  sequence:
  - action: media_player.volume_set
    target:
      entity_id: media_player.sonos_chambre
    data:
      volume_level: 0.7
  - action: media_player.play_media
    target:
      entity_id: media_player.sonos_chambre
    data:
      media_content_id: media-source://media_source/local/wake_up.mp3
      media_content_type: audio/mpeg
    metadata:
      title: wake_up.mp3
      thumbnail:
      media_class: music
      children_media_class:
      navigateIds:
      - {}
      - media_content_type: app
        media_content_id: media-source://media_source
  - wait_for_trigger:
    - platform: state
      entity_id:
      - media_player.sonos_chambre
      to: playing
  - action: light.turn_on
    metadata: {}
    data:
      transition: 14
    target:
      area_id: chambre
  - delay:
      hours: 0
      minutes: 0
      seconds: 12
      milliseconds: 0
  - action: light.turn_off
    metadata: {}
    data: {}
    target:
      area_id: chambre
  - delay:
      hours: 0
      minutes: 0
      seconds: 2
      milliseconds: 0
  - repeat:
      sequence:
      - action: light.turn_on
        metadata: {}
        data:
          flash: short
        target:
          entity_id: light.chambre
      - delay:
          hours: 0
          minutes: 0
          seconds: 1
          milliseconds: 0
      while:
      - condition: state
        entity_id: media_player.sonos_chambre
        state: playing
  description: ''
transfer_music_music_assistant:
  alias: Transférer Musique (Music Assistant)
  sequence:
  - action: mass.transfer_queue
    metadata: {}
    target: '{{target}}'
    data:
      source_player: '{{source}}'
      auto_play: true
  - action: media_player.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: '{{source}}'
  fields:
    target:
      selector:
        target: {}
      name: Target location of the music stream (After Transfer)
      required: true
    source:
      selector:
        entity:
          domain: media_player
          integration: mass
      name: Source location of the music stream (Currently playing)
  description: ''
  icon: mdi:account-music
preparer_depart_maison:
  alias: Préparer départ maison
  sequence:
  - alias: Notify windows open
    if:
    - condition: state
      entity_id: binary_sensor.all_windows
      state: 'on'
    then:
    - variables:
        open_windows: "{{ \n  expand(states.binary_sensor.all_windows.attributes.entity_id)\n
          \   | selectattr('state', 'eq', 'on')\n    | map(attribute='attributes.friendly_name')
          \n    | list\n    | join(\", \")\n}}"
    - event: NOTIFIER
      event_data:
        action: send_to_nearest
        title: "️\U0001F6AA Fenêtre(s) ouverte(s) !"
        message: 'Les fenêtres suivantes sont toujours ouvertes alors que personne
          n''est présent: {{open_windows}}'
        click_url: /lovelace/openings
        tag: home_empty_window_open
        until:
        - entity_id: input_select.modes_de_presence_de_la_maison_v2
          new_state: Occupée
        - entity_id: binary_sensor.all_windows
          new_state: 'off'
  - alias: Notify oven running
    if:
    - condition: state
      entity_id: binary_sensor.is_oven_running
      state: 'on'
    then:
    - event: NOTIFIER
      event_data:
        action: send_to_nearest
        title: "\U0001F958 Four allumé !"
        message: Le four est en marche alors que personne n'est présent!
        tag: home_empty_oven_on
        interuption_level: critical
        until:
        - entity_id: input_select.modes_de_presence_de_la_maison_v2
          new_state: Occupée
        - entity_id: binary_sensor.is_oven_running
          new_state: 'off'
  - alias: Notify cooktop running
    if:
    - condition: state
      entity_id: binary_sensor.is_induction_cooktop_running
      state: 'on'
    then:
    - event: NOTIFIER
      event_data:
        action: send_to_nearest
        title: "\U0001F373 Plaques à induction allumé !"
        message: Les plaques à induction sont en marche alors que personne n'est présent!
        tag: home_empty_induction_cooktop_on
        interuption_level: critical
        until:
        - entity_id: input_select.modes_de_presence_de_la_maison_v2
          new_state: Occupée
        - entity_id: binary_sensor.is_induction_cooktop_running
          new_state: 'off'
  - alias: Notify doors open
    if:
    - condition: state
      entity_id: binary_sensor.all_doors
      state: 'on'
    then:
    - variables:
        open_doors: "{{ \n  expand(states.binary_sensor.all_doors.attributes.entity_id)\n
          \   | selectattr('state', 'eq', 'on')\n    | map(attribute='attributes.friendly_name')
          \n    | list\n    | join(\", \")\n}}"
    - event: NOTIFIER
      event_data:
        action: send_to_nearest
        title: "️\U0001F6AA Porte(s) ouverte(s) !"
        message: 'Les portes suivantes sont toujours ouvertes alors que personne n''est
          présent:  {{open_doors}}'
        click_url: /lovelace/openings
        tag: home_empty_door_open
        until:
        - entity_id: input_select.modes_de_presence_de_la_maison_v2
          new_state: Occupée
        - entity_id: binary_sensor.all_doors
          new_state: 'off'
  mode: queued
  icon: mdi:home-export-outline
  fields: {}
  description: ''
